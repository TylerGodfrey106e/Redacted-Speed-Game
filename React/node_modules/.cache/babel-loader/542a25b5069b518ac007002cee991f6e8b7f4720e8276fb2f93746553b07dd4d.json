{"ast":null,"code":"var _jsxFileName = \"/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n// //import Card from './Card'\n\n// export default function GameData() {\n//   const [messages, setMessages] = useState([]);\n//   const [selectedMessage, setSelectedMessage] = useState(\"\");\n//   const messagesRef = useRef(null);\n//   const wsRef = useRef(null);\n\n//   useEffect(() => {\n//     //messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n//     wsRef.current = new WebSocket(\"ws://localhost:6969\");\n//     wsRef.current.onopen = () => console.log(\"Connection opened!\");\n//     //wsRef.current.onmessage = async (event) => showMessage(event.data);\n//     wsRef.current.onclose = () => {\n//       wsRef.current = null;\n//     };\n\n//     return () => {\n//       if (wsRef.current) {\n//         wsRef.current.close();\n//       }\n//     };\n//   }, []);\n\n//   const sendRandomNumber = () => {\n//     const randomNumber = Math.floor(Math.random() * 10) + 1;\n//     wsRef.current.send(randomNumber.toString());\n//     console.log(\"Sent random number to server:\", randomNumber);\n//   };\n\n//   // Function to handle received messages from the server\n//   const showMessage = (message) => {\n//     // Handle the received message here if needed\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//   };\n\n//   return (\n//     <div>\n//     <h1>Real Time Messaging</h1>\n//     <button onClick={sendRandomNumber}>Get Cards</button>\n//     <div ref={messagesRef}>\n//       {messages.map((message, index) => (\n//         <p key={index}>{message}</p>\n//       ))}\n//     </div>\n//   </div>\n//   );\n// }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameData() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n  useEffect(() => {\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    wsRef.current.onmessage = event => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  // Function to send a JSON package containing a string and a collection of 10 random numbers to the server\n  const sendRandomData = () => {\n    const randomNumbers = [];\n    for (let i = 0; i < 10; i++) {\n      const randomNumber = Math.floor(Math.random() * 100) + 1; // Generating random numbers between 1 and 100 (change this as per your requirement)\n      randomNumbers.push(randomNumber);\n    }\n    const dataToSend = {\n      message: \"Hello from the client!\",\n      numbers: randomNumbers\n    };\n    wsRef.current.send(JSON.stringify(dataToSend));\n    console.log(\"Sent data to server:\", dataToSend);\n  };\n\n  // Function to handle received messages from the server\n  const showMessage = message => {\n    try {\n      const parsedData = JSON.parse(message);\n      setMessages(prevMessages => [...prevMessages, parsedData]);\n    } catch (error) {\n      console.error(\"Error parsing JSON data:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendRandomData,\n      children: \"Get Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(GameData, \"NnOCKN7huFvryVG0wZiT3ZSu7rA=\");\n_c = GameData;\nvar _c;\n$RefreshReg$(_c, \"GameData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GameData","_s","messages","setMessages","selectedMessage","setSelectedMessage","messagesRef","wsRef","current","WebSocket","onopen","console","log","onmessage","event","showMessage","data","onclose","close","sendRandomData","randomNumbers","i","randomNumber","Math","floor","random","push","dataToSend","message","numbers","send","JSON","stringify","parsedData","parse","prevMessages","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","map","index","_c","$RefreshReg$"],"sources":["/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\n// //import Card from './Card'\n\n// export default function GameData() {\n//   const [messages, setMessages] = useState([]);\n//   const [selectedMessage, setSelectedMessage] = useState(\"\");\n//   const messagesRef = useRef(null);\n//   const wsRef = useRef(null);\n\n//   useEffect(() => {\n//     //messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n//     wsRef.current = new WebSocket(\"ws://localhost:6969\");\n//     wsRef.current.onopen = () => console.log(\"Connection opened!\");\n//     //wsRef.current.onmessage = async (event) => showMessage(event.data);\n//     wsRef.current.onclose = () => {\n//       wsRef.current = null;\n//     };\n\n//     return () => {\n//       if (wsRef.current) {\n//         wsRef.current.close();\n//       }\n//     };\n//   }, []);\n\n//   const sendRandomNumber = () => {\n//     const randomNumber = Math.floor(Math.random() * 10) + 1;\n//     wsRef.current.send(randomNumber.toString());\n//     console.log(\"Sent random number to server:\", randomNumber);\n//   };\n\n//   // Function to handle received messages from the server\n//   const showMessage = (message) => {\n//     // Handle the received message here if needed\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//   };\n\n//   return (\n//     <div>\n//     <h1>Real Time Messaging</h1>\n//     <button onClick={sendRandomNumber}>Get Cards</button>\n//     <div ref={messagesRef}>\n//       {messages.map((message, index) => (\n//         <p key={index}>{message}</p>\n//       ))}\n//     </div>\n//   </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nexport default function GameData() {\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n\n  useEffect(() => {\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    wsRef.current.onmessage = (event) => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  // Function to send a JSON package containing a string and a collection of 10 random numbers to the server\n  const sendRandomData = () => {\n    const randomNumbers = [];\n    for (let i = 0; i < 10; i++) {\n      const randomNumber = Math.floor(Math.random() * 100) + 1; // Generating random numbers between 1 and 100 (change this as per your requirement)\n      randomNumbers.push(randomNumber);\n    }\n\n    const dataToSend = {\n      message: \"Hello from the client!\",\n      numbers: randomNumbers,\n    };\n\n    wsRef.current.send(JSON.stringify(dataToSend));\n    console.log(\"Sent data to server:\", dataToSend);\n  };\n\n  // Function to handle received messages from the server\n  const showMessage = (message) => {\n    try {\n      const parsedData = JSON.parse(message);\n      setMessages((prevMessages) => [...prevMessages, parsedData]);\n    } catch (error) {\n      console.error(\"Error parsing JSON data:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Real Time Messaging</h1>\n      <button onClick={sendRandomData}>Get Cards</button>\n      <div ref={messagesRef}>\n        {messages.map((message, index) => (\n          <p key={index}>{message}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}