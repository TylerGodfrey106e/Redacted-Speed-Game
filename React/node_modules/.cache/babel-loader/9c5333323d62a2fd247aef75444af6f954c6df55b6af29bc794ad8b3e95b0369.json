{"ast":null,"code":"var _jsxFileName = \"/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\n//import Card from './Card'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameData() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n  useEffect(() => {\n    //messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    wsRef.current.onmessage = async event => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  //   const showMessage = async (message) => {\n  //     if (typeof message !== \"string\") {\n  //       try {\n  //         message = await message.text();\n  //       } catch (error) {\n  //         console.error(\"Error converting Blob to text:\", error);\n  //         return;\n  //       }\n  //     }\n\n  //     setMessages((prevMessages) => [...prevMessages, message]);\n  //   };\n\n  //   const sendMessage = () => {\n  //     if (!wsRef.current) {\n  //       showMessage(\"No WebSocket connection.\");\n  //       return;\n  //     }\n\n  //     wsRef.current.send(selectedMessage);\n  //     showMessage(selectedMessage);\n  //     setSelectedMessage(\"\");\n  //   };\n\n  //   const handleSelectChange = (event) => {\n  //     setSelectedMessage(event.target.value);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(GameData, \"NnOCKN7huFvryVG0wZiT3ZSu7rA=\");\n_c = GameData;\nvar _c;\n$RefreshReg$(_c, \"GameData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GameData","_s","messages","setMessages","selectedMessage","setSelectedMessage","messagesRef","wsRef","current","WebSocket","onopen","console","log","onmessage","event","showMessage","data","onclose","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n//import Card from './Card'\n\nexport default function GameData() {\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n\n  useEffect(() => {\n    //messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    wsRef.current.onmessage = async (event) => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n//   const showMessage = async (message) => {\n//     if (typeof message !== \"string\") {\n//       try {\n//         message = await message.text();\n//       } catch (error) {\n//         console.error(\"Error converting Blob to text:\", error);\n//         return;\n//       }\n//     }\n\n//     setMessages((prevMessages) => [...prevMessages, message]);\n//   };\n\n//   const sendMessage = () => {\n//     if (!wsRef.current) {\n//       showMessage(\"No WebSocket connection.\");\n//       return;\n//     }\n\n//     wsRef.current.send(selectedMessage);\n//     showMessage(selectedMessage);\n//     setSelectedMessage(\"\");\n//   };\n\n//   const handleSelectChange = (event) => {\n//     setSelectedMessage(event.target.value);\n//   };\n\n  return (\n    <div>\n      <h1>Real Time Messaging</h1>\n      \n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMW,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,KAAK,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACd;;IAEAW,KAAK,CAACC,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IACpDF,KAAK,CAACC,OAAO,CAACE,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAC9DL,KAAK,CAACC,OAAO,CAACK,SAAS,GAAG,MAAOC,KAAK,IAAKC,WAAW,CAACD,KAAK,CAACE,IAAI,CAAC;IAClET,KAAK,CAACC,OAAO,CAACS,OAAO,GAAG,MAAM;MAC5BV,KAAK,CAACC,OAAO,GAAG,IAAI;IACtB,CAAC;IAED,OAAO,MAAM;MACX,IAAID,KAAK,CAACC,OAAO,EAAE;QACjBD,KAAK,CAACC,OAAO,CAACU,KAAK,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEE,oBACEnB,OAAA;IAAAoB,QAAA,eACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEzB,CAAC;AAEV;AAACtB,EAAA,CAzDuBD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}