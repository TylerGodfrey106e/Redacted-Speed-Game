{"ast":null,"code":"var _jsxFileName = \"/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\n//import Card from './Card'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameData() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n  useEffect(() => {\n    //messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    //wsRef.current.onmessage = async (event) => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n  const sendRandomNumber = () => {\n    const randomNumber = Math.floor(Math.random() * 10) + 1;\n    wsRef.current.send(randomNumber.toString());\n    console.log(\"Sent random number to server:\", randomNumber);\n  };\n\n  // Function to handle received messages from the server\n  const showMessage = message => {\n    // Handle the received message here if needed\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Get Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(GameData, \"NnOCKN7huFvryVG0wZiT3ZSu7rA=\");\n_c = GameData;\nvar _c;\n$RefreshReg$(_c, \"GameData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GameData","_s","messages","setMessages","selectedMessage","setSelectedMessage","messagesRef","wsRef","current","WebSocket","onopen","console","log","onclose","close","sendRandomNumber","randomNumber","Math","floor","random","send","toString","showMessage","message","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n//import Card from './Card'\n\nexport default function GameData() {\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n\n  useEffect(() => {\n    //messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    //wsRef.current.onmessage = async (event) => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  const sendRandomNumber = () => {\n    const randomNumber = Math.floor(Math.random() * 10) + 1;\n    wsRef.current.send(randomNumber.toString());\n    console.log(\"Sent random number to server:\", randomNumber);\n  };\n\n  // Function to handle received messages from the server\n  const showMessage = (message) => {\n    // Handle the received message here if needed\n    setMessages((prevMessages) => [...prevMessages, message]);\n  };\n\n  return (\n    <div>\n      <h1>Real Time Messaging</h1>\n      <button>Get Cards</button>\n      \n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMW,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,KAAK,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACd;;IAEAW,KAAK,CAACC,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IACpDF,KAAK,CAACC,OAAO,CAACE,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAC9D;IACAL,KAAK,CAACC,OAAO,CAACK,OAAO,GAAG,MAAM;MAC5BN,KAAK,CAACC,OAAO,GAAG,IAAI;IACtB,CAAC;IAED,OAAO,MAAM;MACX,IAAID,KAAK,CAACC,OAAO,EAAE;QACjBD,KAAK,CAACC,OAAO,CAACM,KAAK,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;IACvDZ,KAAK,CAACC,OAAO,CAACY,IAAI,CAACJ,YAAY,CAACK,QAAQ,CAAC,CAAC,CAAC;IAC3CV,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEI,YAAY,CAAC;EAC5D,CAAC;;EAED;EACA,MAAMM,WAAW,GAAIC,OAAO,IAAK;IAC/B;IACApB,WAAW,CAAEqB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,OAAO,CAAC,CAAC;EAC3D,CAAC;EAED,oBACExB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B9B,OAAA;MAAA0B,QAAA,EAAQ;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvB,CAAC;AAEV;AAAC5B,EAAA,CA1CuBD,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}