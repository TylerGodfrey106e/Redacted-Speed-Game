{"ast":null,"code":"var _jsxFileName = \"/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\n//import Card from './Card'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameData() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n  useEffect(() => {\n    messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    wsRef.current.onmessage = async event => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n  const showMessage = async message => {\n    if (typeof message !== \"string\") {\n      try {\n        message = await message.text();\n      } catch (error) {\n        console.error(\"Error converting Blob to text:\", error);\n        return;\n      }\n    }\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n  const sendMessage = () => {\n    if (!wsRef.current) {\n      showMessage(\"No WebSocket connection.\");\n      return;\n    }\n    wsRef.current.send(selectedMessage);\n    showMessage(selectedMessage);\n    setSelectedMessage(\"\");\n  };\n  const handleSelectChange = event => {\n    setSelectedMessage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(GameData, \"NnOCKN7huFvryVG0wZiT3ZSu7rA=\");\n_c = GameData;\nvar _c;\n$RefreshReg$(_c, \"GameData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GameData","_s","messages","setMessages","selectedMessage","setSelectedMessage","messagesRef","wsRef","current","scrollTop","scrollHeight","WebSocket","onopen","console","log","onmessage","event","showMessage","data","onclose","close","message","text","error","prevMessages","sendMessage","send","handleSelectChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jess/Desktop/Final_Project/Redacted_Speed_Game/React/src/components/GameData.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n//import Card from './Card'\n\nexport default function GameData() {\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\n  const messagesRef = useRef(null);\n  const wsRef = useRef(null);\n\n  useEffect(() => {\n    messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n\n    wsRef.current = new WebSocket(\"ws://localhost:6969\");\n    wsRef.current.onopen = () => console.log(\"Connection opened!\");\n    wsRef.current.onmessage = async (event) => showMessage(event.data);\n    wsRef.current.onclose = () => {\n      wsRef.current = null;\n    };\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  const showMessage = async (message) => {\n    if (typeof message !== \"string\") {\n      try {\n        message = await message.text();\n      } catch (error) {\n        console.error(\"Error converting Blob to text:\", error);\n        return;\n      }\n    }\n\n    setMessages((prevMessages) => [...prevMessages, message]);\n  };\n\n  const sendMessage = () => {\n    if (!wsRef.current) {\n      showMessage(\"No WebSocket connection.\");\n      return;\n    }\n\n    wsRef.current.send(selectedMessage);\n    showMessage(selectedMessage);\n    setSelectedMessage(\"\");\n  };\n\n  const handleSelectChange = (event) => {\n    setSelectedMessage(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Real Time Messaging</h1>\n      \n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMW,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,KAAK,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACdU,WAAW,CAACE,OAAO,CAACC,SAAS,GAAGH,WAAW,CAACE,OAAO,CAACE,YAAY;IAEhEH,KAAK,CAACC,OAAO,GAAG,IAAIG,SAAS,CAAC,qBAAqB,CAAC;IACpDJ,KAAK,CAACC,OAAO,CAACI,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IAC9DP,KAAK,CAACC,OAAO,CAACO,SAAS,GAAG,MAAOC,KAAK,IAAKC,WAAW,CAACD,KAAK,CAACE,IAAI,CAAC;IAClEX,KAAK,CAACC,OAAO,CAACW,OAAO,GAAG,MAAM;MAC5BZ,KAAK,CAACC,OAAO,GAAG,IAAI;IACtB,CAAC;IAED,OAAO,MAAM;MACX,IAAID,KAAK,CAACC,OAAO,EAAE;QACjBD,KAAK,CAACC,OAAO,CAACY,KAAK,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMH,WAAW,GAAG,MAAOI,OAAO,IAAK;IACrC,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI;QACFA,OAAO,GAAG,MAAMA,OAAO,CAACC,IAAI,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD;MACF;IACF;IAEApB,WAAW,CAAEqB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,OAAO,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAClB,KAAK,CAACC,OAAO,EAAE;MAClBS,WAAW,CAAC,0BAA0B,CAAC;MACvC;IACF;IAEAV,KAAK,CAACC,OAAO,CAACkB,IAAI,CAACtB,eAAe,CAAC;IACnCa,WAAW,CAACb,eAAe,CAAC;IAC5BC,kBAAkB,CAAC,EAAE,CAAC;EACxB,CAAC;EAED,MAAMsB,kBAAkB,GAAIX,KAAK,IAAK;IACpCX,kBAAkB,CAACW,KAAK,CAACY,MAAM,CAACC,KAAK,CAAC;EACxC,CAAC;EAED,oBACE9B,OAAA;IAAA+B,QAAA,eACE/B,OAAA;MAAA+B,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEzB,CAAC;AAEV;AAACjC,EAAA,CAzDuBD,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}